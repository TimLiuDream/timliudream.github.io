<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on tim</title>
    <link>https://timliudream.github.io/posts/</link>
    <description>Recent content in Posts on tim</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 26 Sep 2020 17:45:03 +0800</lastBuildDate><atom:link href="https://timliudream.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>map的使用注意事项</title>
      <link>https://timliudream.github.io/posts/golang/map/</link>
      <pubDate>Sat, 26 Sep 2020 17:45:03 +0800</pubDate>
      
      <guid>https://timliudream.github.io/posts/golang/map/</guid>
      <description>map是无序的，每次打印出来的map都会不一样，它不能通过index获取，而必须通过key获取 map的长度是不固定的，也就是和slice一样，也是一种引用类型 内置的len函数同样适用于map，返回map拥有的key的数量 map的值可以很方便的修改，通过numbers[&amp;ldquo;one&amp;rdquo;]=11可以很容易的把key为one的字典值改为11 map和其他基本型别不同，它不是thread-safe，在多个go-routine存取时，必须使用mutex lock机制  最后一点需要注意： 字典不是线程安全的，在多个线程操作字典的时候，需要使用到互斥锁
判断map中是否含有某个key
v,ok:=map[key] if ok{ ... } map的查询效率(时间复杂度)（需要很懂数据结构，暂不深究）
golang中的map底层是hashMap数据结构，那么：
 插入:O(1)，最坏情况O(N)。 查看:O(1)，最坏情况O(N)。 删除:O(1)，最坏情况O(N)。  C++中的map采用的是红黑树实现，红黑树是平衡二叉树的一种。不同操作的时间复杂度近似为:
 插入: O(logN) 查看:O(logN) 删除:O(logN)  map与slice的速度比较
map的时间复杂度是O(1)，slice的时间复杂度是O(n) 是不是map就一定比slice快呢？
var testTimeSlice=[]string{&amp;#34;aa&amp;#34;,&amp;#34;bb&amp;#34;,&amp;#34;cc&amp;#34;,&amp;#34;dd&amp;#34;,&amp;#34;ee&amp;#34;,&amp;#34;aa&amp;#34;,&amp;#34;zz&amp;#34;} var testTimeMap = map[string]bool{&amp;#34;aa&amp;#34;: true, &amp;#34;bb&amp;#34;: true, &amp;#34;cc&amp;#34;: true, &amp;#34;dd&amp;#34;: true, &amp;#34;ee&amp;#34;: true, &amp;#34;ff&amp;#34;: true, &amp;#34;zz&amp;#34;: true} //以上为第一组查询测试数据  var testTimeSlice2=[] string{&amp;#34;aa&amp;#34;,&amp;#34;bb&amp;#34;,&amp;#34;cc&amp;#34;,&amp;#34;dd&amp;#34;,&amp;#34;ee&amp;#34;,&amp;#34;aa&amp;#34;,&amp;#34;aa&amp;#34;,&amp;#34;bb&amp;#34;,&amp;#34;cc&amp;#34;,&amp;#34;dd&amp;#34;,&amp;#34;ee&amp;#34;,&amp;#34;aa&amp;#34;,&amp;#34;aa&amp;#34;,&amp;#34;bb&amp;#34;,&amp;#34;cc&amp;#34;,&amp;#34;dd&amp;#34;,&amp;#34;ee&amp;#34;,&amp;#34;aa&amp;#34;,&amp;#34;aa&amp;#34;,&amp;#34;bb&amp;#34;,&amp;#34;cc&amp;#34;,&amp;#34;dd&amp;#34;,&amp;#34;ee&amp;#34;,&amp;#34;aa&amp;#34;,&amp;#34;i&amp;#34;,&amp;#34;j&amp;#34;, &amp;#34;l&amp;#34;, &amp;#34;m&amp;#34;, &amp;#34;n&amp;#34;, &amp;#34;o&amp;#34;, &amp;#34;p&amp;#34;, &amp;#34;q&amp;#34;, &amp;#34;k&amp;#34;, &amp;#34;x&amp;#34;, &amp;#34;y&amp;#34;, &amp;#34;z&amp;#34;, &amp;#34;1&amp;#34;, &amp;#34;2&amp;#34;, &amp;#34;3&amp;#34;, &amp;#34;4&amp;#34;, &amp;#34;5&amp;#34;, &amp;#34;6&amp;#34;, &amp;#34;7&amp;#34;, &amp;#34;8&amp;#34;, &amp;#34;9&amp;#34;, &amp;#34;10&amp;#34;,&amp;#34;zz&amp;#34;} var testTimeMap2 = map[string]bool{&amp;#34;aa&amp;#34;: true, &amp;#34;bb&amp;#34;: true, &amp;#34;cc&amp;#34;: true, &amp;#34;dd&amp;#34;: true, &amp;#34;ee&amp;#34;: true, &amp;#34;ff&amp;#34;: true, &amp;#34;qq&amp;#34;: true,&amp;#34;ww&amp;#34;: true, &amp;#34;rr&amp;#34;: true, &amp;#34;tt&amp;#34;: true, &amp;#34;zz&amp;#34;: true, &amp;#34;uu&amp;#34;: true, &amp;#34;ii&amp;#34;: true,&amp;#34;oo&amp;#34;: true, &amp;#34;pp&amp;#34;: true, &amp;#34;lk&amp;#34;: true, &amp;#34;kl&amp;#34;: true, &amp;#34;jk&amp;#34;: true, &amp;#34;kj&amp;#34;: true,&amp;#34;hl&amp;#34;: true, &amp;#34;lh&amp;#34;: true, &amp;#34;fg&amp;#34;: true, &amp;#34;gfdd&amp;#34;: true, &amp;#34;df&amp;#34;: true, &amp;#34;fd&amp;#34;: true, &amp;#34;i&amp;#34;: true, &amp;#34;j&amp;#34;: true, &amp;#34;l&amp;#34;: true, &amp;#34;m&amp;#34;: true, &amp;#34;n&amp;#34;: true, &amp;#34;o&amp;#34;: true, &amp;#34;p&amp;#34;: true, &amp;#34;q&amp;#34;: true, &amp;#34;k&amp;#34;: true, &amp;#34;x&amp;#34;: true, &amp;#34;y&amp;#34;: true, &amp;#34;z&amp;#34;: true, &amp;#34;1&amp;#34;: true, &amp;#34;2&amp;#34;: true, &amp;#34;3&amp;#34;: true, &amp;#34;4&amp;#34;: true, &amp;#34;5&amp;#34;: true, &amp;#34;6&amp;#34;: true, &amp;#34;7&amp;#34;: true, &amp;#34;8&amp;#34;: true, &amp;#34;9&amp;#34;: true, &amp;#34;10&amp;#34;: true} //以上为第二组查询测试数据  func testSlice(a []string) { now:=time.</description>
    </item>
    
    <item>
      <title>golang类型判断</title>
      <link>https://timliudream.github.io/posts/golang/type_judge/</link>
      <pubDate>Sat, 26 Sep 2020 17:39:49 +0800</pubDate>
      
      <guid>https://timliudream.github.io/posts/golang/type_judge/</guid>
      <description>_.ok:=interface{}(a).(B) 此语句用于判断对象a是否是B类型
也可以判断对象a是否实现了B接口
package main import &amp;#34;fmt&amp;#34; type Pet interface { SetName(name string) Name()string Category()string } type Dog struct { name string } func (dog *Dog) SetName(name string) { dog.name = name } func(dog Dog) Name()string{ return dog.name } func (dog Dog)Category()string{ return &amp;#34;dog&amp;#34; } func main() { dog:=Dog{&amp;#34;little pig&amp;#34;} _,ok:=interface{}(dog).(Pet) fmt.Printf(&amp;#34;Dog implements interface Pet: %v\n&amp;#34;, ok) _, ok = interface{}(&amp;amp;dog).(Pet) fmt.Printf(&amp;#34;*Dog implements interface Pet: %v\n&amp;#34;, ok) fmt.Println() var pet Pet = &amp;amp;dog fmt.</description>
    </item>
    
    <item>
      <title>golang文件相对路径问题</title>
      <link>https://timliudream.github.io/posts/golang/relative_path/</link>
      <pubDate>Sat, 26 Sep 2020 17:34:48 +0800</pubDate>
      
      <guid>https://timliudream.github.io/posts/golang/relative_path/</guid>
      <description>目录结构：
--simple --data --data.json --search --feed.go 具体代码：
const dataFile = &amp;#34;../data/data.json&amp;#34; _, filename, _, _ := runtime.Caller(1) datapath := path.Join(path.Dir(filename), dataFile) fmt.Println(datapath) //打开文件 file, err := os.Open(datapath) if err != nil { return nil, err } //当函数return时，关闭文件 defer file.Close() 如果不要中间获取源文件的路径：
_, filename, _, _ := runtime.Caller(1) 直接打开文件的话，是会报错的，会报找不到的错误， 所以只能先获取当前源文件的路径再join数据文件</description>
    </item>
    
    <item>
      <title>golang中数组与切片的区别</title>
      <link>https://timliudream.github.io/posts/golang/array_compare_slice/</link>
      <pubDate>Thu, 24 Sep 2020 21:39:11 +0800</pubDate>
      
      <guid>https://timliudream.github.io/posts/golang/array_compare_slice/</guid>
      <description>初始化：数组需要指定大小，不指定也会根据初始化的自动推算出大小，不可改变
数组：
a := [...]int{1,2,3} a := [3]int{1,2,3} 切片：
a:= []int{1,2,3} a := make([]int, 5) a := make([]int, 5, 10) slice的数据结构：
go源码slice的数据结构定义：
type slice struct { array unsafe.Pointer len int cap int } 一个指向真实 array 地址的指针 ptr ，slice 的长度 len 和容量 cap
函数传递：数组需要明确指定大小，切片不需要。数组是值传递，切片是地址传递
numbers2 := [...]int{1, 2, 3, 4, 5, 6} maxIndex2 := len(numbers2) - 1 for i, e := range numbers2 { if i == maxIndex2 { numbers2[0] += e } else { numbers2[i+1] += e } } fmt.</description>
    </item>
    
    <item>
      <title>golang的一些基础数据类型转换</title>
      <link>https://timliudream.github.io/posts/golang/convert/</link>
      <pubDate>Thu, 24 Sep 2020 21:34:55 +0800</pubDate>
      
      <guid>https://timliudream.github.io/posts/golang/convert/</guid>
      <description>int &amp;ndash; string  //string TO int value_int,err:=strconv.Atoi(string) //int TO string str:=strconv.Itoa(value_int) int64 &amp;ndash; string  //string TO int64 value_int64, err := strconv.ParseInt(string, 10, 64) //int64 TO string,需注意下面转换规定 //FormatInt returns the string representation of i in the given base, for 2 &amp;lt;= base &amp;lt;= 36. //The result uses the lower-case letters &amp;#39;a&amp;#39; to &amp;#39;z&amp;#39; for digit values &amp;gt;= 10 str:=strconv.FormatInt(value_int64,10)//FormatInt第二个参数表示进制，10表示十进制。 float &amp;ndash; string  //float TO string v := 3.</description>
    </item>
    
    <item>
      <title>golang变量的注意</title>
      <link>https://timliudream.github.io/posts/golang/variable/</link>
      <pubDate>Thu, 24 Sep 2020 21:30:39 +0800</pubDate>
      
      <guid>https://timliudream.github.io/posts/golang/variable/</guid>
      <description> 方法内部的变量使用方法:  /* 定义三个变量，它们分别初始化为相应的值 vname1为v1，vname2为v2，vname3为v3 编译器会根据初始化的值自动推导出相应的类型 */ vname1, vname2, vname3 := v1, v2, v3 全局变量的使用方法：  /* 定义三个类型都是&amp;#34;type&amp;#34;的变量,并且分别初始化为相应的值 vname1为v1，vname2为v2，vname3为v3 */ var vname1, vname2, vname3 type= v1, v2, v3  :=这个符号直接取代了var和type,这种形式叫做简短声明。不过它有一个限制，那就是它只能用在函数内部；在函数外部使用则会无法编译通过，所以一般用var方式来定义全局变量。
  _（下划线）是个特殊的变量名，任何赋予它的值都会被丢弃。在这个例子中，我们将值35赋予b，并同时丢弃34：
  _, b := 34, 35 </description>
    </item>
    
    <item>
      <title>mysql中的case用法</title>
      <link>https://timliudream.github.io/posts/mysql/case/</link>
      <pubDate>Tue, 22 Sep 2020 20:52:24 +0800</pubDate>
      
      <guid>https://timliudream.github.io/posts/mysql/case/</guid>
      <description>最近遇到一个问题：
   year amount number     1991 1 1.1   1991 2 1.2   1991 3 1.3   1992 1 1.1   1992 2 1.2   1992 3 1.3    把上面表格的数据查询成：
   year m1 m2 m3     1991 1.1 1.2 1.3   1992 2.1 2.2 2.3    看到这样的需求，首先想到的是用case去统计以及 用group by来分组</description>
    </item>
    
    <item>
      <title>golang中的iota用法</title>
      <link>https://timliudream.github.io/posts/golang/iota/</link>
      <pubDate>Mon, 21 Sep 2020 21:31:59 +0800</pubDate>
      
      <guid>https://timliudream.github.io/posts/golang/iota/</guid>
      <description>有些概念有名字，并且有时候我们关注这些名字，甚至（特别）是在我们代码中。
const ( CCVisa = &amp;#34;Visa&amp;#34; CCMasterCard = &amp;#34;MasterCard&amp;#34; CCAmericanExpress = &amp;#34;American Express&amp;#34; ) 在其他时候，我们仅仅关注能把一个东西与其他的做区分。有些时候，有些时候一件事没有本质上的意义。比如，我们在一个数据库表中存储产品，我们可能不想以 string 存储他们的分类。我们不关注这个分类是怎样命名的，此外，该名字在市场上一直在变化。
我们仅仅关注它们是怎么彼此区分的。
const ( CategoryBooks = 0 CategoryHealth = 1 CategoryClothing = 2 ) 使用 0, 1, 和 2 代替，我们也可以选择 17， 43， 和 61。这些值是任意的。
常量是重要的，但是它们很难推断，并且难以维护。在一些语言中像 Ruby 开发者通常只是避免它们。在 Go，常量有许多微妙之处。当用好了，可以使得代码非常优雅且易维护的
 自增长 在 golang 中，一个方便的习惯就是使用 iota 标示符，它简化了常量用于增长数字的定义，给以上相同的值以准确的分类。
const ( CategoryBooks = iota // 0  CategoryHealth // 1  CategoryClothing // 2 )  自定义类型 自增长常量经常包含一个自定义类型，允许你依靠编译器。</description>
    </item>
    
    <item>
      <title>缓存穿透、缓存击穿、缓存雪崩</title>
      <link>https://timliudream.github.io/posts/code/cache/</link>
      <pubDate>Sun, 20 Sep 2020 20:11:33 +0800</pubDate>
      
      <guid>https://timliudream.github.io/posts/code/cache/</guid>
      <description>缓存穿透 如果缓存和数据库都没有查询的数据，那么每次都会去数据库查找，这种查询不存在的数据的现象称为缓存穿透
缓存穿透带来的问题 如果每次都拿一个不存在的id去查询数据库，可能会导致数据库压力增大，数据库有可能会挂
解决办法  缓存空值  之所以会发生穿透，是因为缓存中没有存储这些数据的key，从而每次都查询数据库 我们可以为这些key在缓存中设置对应的值为null，后面查询这个key的时候就不用查询数据库了 当然为了健壮性，还要对这些key设置过期时间，以防止数据库中真的有数据     缓存击穿 在高并发下，大量的请求同时查询同一个key时，此时这个key刚好失效，就会导致同一时间内，这些请求都会去查询数据库
击穿带来的问题 会造成某一时刻数据库的请求量很大
解决办法 采用锁，只有拿到锁的第一个线程去请求数据库，然后插入缓存，当然每次拿到锁的时候都要去查询一下有没有缓存
 缓存雪崩 当某一时刻发生大规模的缓存失效的情况，比如说缓存服务器宕机了
解决办法  采用集群，减少宕机的几率 限流和降级   解决热点数据集中失效的问题 我们在设置缓存的时候，一般会给缓存设置一个失效时间，过了这个时间，缓存就失效了
对于一些热点数据而言，当缓存失效以后会有大量的请求过来，然后打到数据库中，从而导致数据库崩溃的情况
解决办法  设置不同的失效时间 采用加锁机制 永不失效，就是采用定时任务对快要失效的缓存进行更新缓存和失效时间  </description>
    </item>
    
    <item>
      <title>漏桶算法&amp;令牌桶算法</title>
      <link>https://timliudream.github.io/posts/algorithm/leaky_bucket/</link>
      <pubDate>Sun, 20 Sep 2020 19:43:02 +0800</pubDate>
      
      <guid>https://timliudream.github.io/posts/algorithm/leaky_bucket/</guid>
      <description>背景 每一个对外提供的API接口都是需要做流量控制的，不然会导致系统直接崩溃。很简单的例子，和保险丝的原理一样，如果用电符合超载就会烧断保险丝断掉电源以达到保护的作用。API限流的意义也是如此，如果API上的流量请求超过核定的数值我们就得对请求进行引流或者直接拒绝等操作。
限流算法 既然要限流，就得提到限流算法了，一般有漏桶算法和令牌桶算法两种限流算法。## 背景
每一个对外提供的API接口都是需要做流量控制的，不然会导致系统直接崩溃。很简单的例子，和保险丝的原理一样，如果用电符合超载就会烧断保险丝断掉电源以达到保护的作用。API限流的意义也是如此，如果API上的流量请求超过核定的数值我们就得对请求进行引流或者直接拒绝等操作。
漏桶算法 漏桶算法(Leaky Bucket)是网络世界中流量整形（Traffic Shaping）或速率限制（Rate Limiting）时经常使用的一种算法，它的主要目的是控制数据注入到网络的速率，平滑网络上的突发流量。漏桶算法提供了一种机制，通过它，突发流量可以被整形以便为网络提供一个稳定的流量。
漏桶可以看作是一个带有常量服务时间的单服务器队列，如果漏桶（包缓存）溢出，那么数据包会被丢弃。 在网络中，漏桶算法可以控制端口的流量输出速率，平滑网络上的突发流量，实现流量整形，从而为网络提供一个稳定的流量。
如图所示，把请求比作是水，水来了都先放进桶里，并以限定的速度出水，当水来得过猛而出水不够快时就会导致水直接溢出，即拒绝服务。
可以看出，漏桶算法可以很好的控制流量的访问速度，一旦超过该速度就拒绝服务。
令牌桶算法 令牌桶算法是网络流量整形（Traffic Shaping）和速率限制（Rate Limiting）中最常使用的一种算法。典型情况下，令牌桶算法用来控制发送到网络上的数据的数目，并允许突发数据的发送。
令牌桶算法的原理是系统会以一个恒定的速度往桶里放入令牌，而如果请求需要被处理，则需要先从桶里获取一个令牌，当桶里没有令牌可取时，则拒绝服务。从原理上看，令牌桶算法和漏桶算法是相反的，一个“进水”，一个是“漏水”。
Google的Guava包中的RateLimiter类就是令牌桶算法的解决方案。
漏桶算法和令牌桶算法的选择 漏桶算法与令牌桶算法在表面看起来类似，很容易将两者混淆。但事实上，这两者具有截然不同的特性，且为不同的目的而使用。
漏桶算法与令牌桶算法的区别在于，漏桶算法能够强行限制数据的传输速率，令牌桶算法能够在限制数据的平均传输速率的同时还允许某种程度的突发传输。
需要注意的是，在某些情况下，漏桶算法不能够有效地使用网络资源，因为漏桶的漏出速率是固定的，所以即使网络中没有发生拥塞，漏桶算法也不能使某一个单独的数据流达到端口速率。因此，漏桶算法对于存在突发特性的流量来说缺乏效率。而令牌桶算法则能够满足这些具有突发特性的流量。通常，漏桶算法与令牌桶算法结合起来为网络流量提供更高效的控制。</description>
    </item>
    
    <item>
      <title>在Windows10系统下通过hugo搭建个人博客</title>
      <link>https://timliudream.github.io/posts/hugo/hugo_blog/</link>
      <pubDate>Sun, 20 Sep 2020 18:43:30 +0800</pubDate>
      
      <guid>https://timliudream.github.io/posts/hugo/hugo_blog/</guid>
      <description>在hugo官网上下载安装包，选择windows版本
  将hugo的安装包解压后，将解压后的路径加入到系统的环境变量PATH中便可运行hugo
  打开命令提示符窗口，进入hugo安装文件夹，然后通过hugo version便可查看安装的hugo版本，即hugo安装成功
  通过hugo新建一个文件夹来存放我们之后要放的博客资料，此处在E盘的hugo文件中来新建myblog文件来存放博客资料;进入E:\hugo目录，键入hugo new site myblog来创建myblog文件，点击回车   下载一个博客主题，选择一个自己喜欢的主题点击进入，然后找到如下代码部分
  假设我选择了noteworthy这个主题，只需要在myblog下执行以下命令即可
  git clone https://github.com/kimcc/hugo-theme-noteworthy.git themes/noteworthy 在本地启动个人博客：在myblog根目录下键入hugo server -t noteworthy &amp;ndash;buildDrafts：(其中noteworthy为下载的主题名)  hugo server -t noteworthy --buildDrafts 当出现以上提示，则证明本地启动成功。可以在浏览器中查看http://localhost:1313/，看站点是否起来</description>
    </item>
    
  </channel>
</rss>
